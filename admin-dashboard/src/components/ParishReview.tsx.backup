// Parish Review component for Chancery Office to review parish submissions
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { useToast } from '@/components/ui/use-toast';
import { db } from '@/lib/firebase';
import { useAuth, type Diocese } from '@/contexts/AuthContext';
import {
  collection,
  query,
  where,
  orderBy,
  getDocs,
  doc,
  updateDoc,
  Timestamp
} from 'firebase/firestore';
import {
  CheckCircle,
  XCircle,
  Clock,
  Eye,
  Edit,
  Send,
  AlertTriangle,
  FileText,
  MapPin,
  Phone,
  Mail,
  Calendar
} from 'lucide-react';

// Types
interface ParishSubmission {
  id: string;
  name: string;
  location: string;
  priest: string;
  diocese: Diocese;
  status: 'pending' | 'under_review' | 'approved' | 'rejected' | 'needs_revision';
  lastReview?: Date;
  notes: string;
  contactEmail: string;
  phoneNumber: string;
  parishioners: number;
  createdAt: Date;
  updatedAt: Date;
  submittedBy: string;
  churchInfo?: {
    foundingYear?: number;
    architecturalStyle?: string;
    heritageClassification?: string;
    description?: string;
  };
  documents?: Array<{
    id: string;
    name: string;
    url: string;
    type: string;
  }>;
}

interface ReviewAction {
  action: 'approve' | 'reject' | 'request_revision' | 'forward_to_museum';
  notes: string;
  reviewerId: string;
}

export const ParishReview: React.FC = () => {
  const { userProfile } = useAuth();
  const { toast } = useToast();
  
  const [submissions, setSubmissions] = useState<ParishSubmission[]>([]);
  const [selectedSubmission, setSelectedSubmission] = useState<ParishSubmission | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [reviewNotes, setReviewNotes] = useState('');
  const [isSubmittingReview, setIsSubmittingReview] = useState(false);
  const [activeTab, setActiveTab] = useState('pending');

  // Load parish submissions
  useEffect(() => {
    loadSubmissions();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [userProfile?.diocese]);

  const loadSubmissions = async () => {
    if (!userProfile?.diocese) return;

    try {
      setIsLoading(true);
      
      const q = query(
        collection(db, 'churches'),
        where('diocese', '==', userProfile.diocese),
        where('status', 'in', ['pending', 'under_review', 'needs_revision']),
        orderBy('createdAt', 'desc')
      );

      const snapshot = await getDocs(q);
      const submissionData: ParishSubmission[] = snapshot.docs.map(doc => {
        const data = doc.data();
        return {
          id: doc.id,
          name: data.name || data.churchName || '',
          location: data.location || '',
          priest: data.priest || data.currentParishPriest || '',
          diocese: data.diocese as Diocese,
          status: data.status || 'pending',
          lastReview: data.lastReview?.toDate?.() || undefined,
          notes: data.notes || '',
          contactEmail: data.contactEmail || data.contactInfo?.email || '',
          phoneNumber: data.phoneNumber || data.contactInfo?.phone || '',
          parishioners: data.parishioners || 0,
          createdAt: data.createdAt?.toDate?.() || new Date(),
          updatedAt: data.updatedAt?.toDate?.() || new Date(),
          submittedBy: data.submittedBy || data.createdBy || '',
          churchInfo: {
            foundingYear: data.foundingYear || data.historicalDetails?.foundingYear,
            architecturalStyle: data.architecturalStyle || data.historicalDetails?.architecturalStyle,
            heritageClassification: data.heritageClassification || data.historicalDetails?.heritageClassification,
            description: data.description || data.historicalDetails?.historicalBackground
          },
          documents: data.documents || []
        };
      });

      setSubmissions(submissionData);
    } catch (error: unknown) {
      console.error('Error loading submissions:', error);
      const errorMessage = error instanceof Error ? error.message : 'Failed to load submissions';
      toast({
        title: "Error",
        description: errorMessage,
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleReviewAction = async (action: ReviewAction['action']) => {
    if (!selectedSubmission || !userProfile?.uid) return;

    try {
      setIsSubmittingReview(true);

      const updateData: Record<string, unknown> = {
        status: action === 'approve' ? 'approved' : 
                action === 'reject' ? 'rejected' :
                action === 'request_revision' ? 'needs_revision' :
                'under_review',
        reviewedBy: userProfile.uid,
        reviewedAt: Timestamp.now(),
        reviewNotes: reviewNotes,
        updatedAt: Timestamp.now()
      };

      if (action === 'approve') {
        updateData.approvedAt = Timestamp.now();
      } else if (action === 'forward_to_museum') {
        updateData.status = 'heritage_review';
        updateData.forwardedToMuseum = true;
        updateData.forwardedAt = Timestamp.now();
      }

      await updateDoc(doc(db, 'churches', selectedSubmission.id), updateData);

      // Update local state
      setSubmissions(prev => prev.map(sub => 
        sub.id === selectedSubmission.id 
          ? { ...sub, status: updateData.status as ParishSubmission['status'], notes: reviewNotes }
          : sub
      ));

      setSelectedSubmission(null);
      setReviewNotes('');

      toast({
        title: "Success",
        description: `Parish submission ${action.replace('_', ' ')}d successfully`,
      });

    } catch (error: unknown) {
      console.error('Error reviewing submission:', error);
      const errorMessage = error instanceof Error ? error.message : 'Failed to review submission';
      toast({
        title: "Error", 
        description: errorMessage,
        variant: "destructive"
      });
    } finally {
      setIsSubmittingReview(false);
    }
  };

  const getStatusBadge = (status: ParishSubmission['status']) => {
    const statusConfig = {
      pending: { variant: 'secondary' as const, label: 'Pending Review', color: 'bg-yellow-500' },
      under_review: { variant: 'default' as const, label: 'Under Review', color: 'bg-blue-500' },
      approved: { variant: 'default' as const, label: 'Approved', color: 'bg-green-500' },
      rejected: { variant: 'destructive' as const, label: 'Rejected', color: 'bg-red-500' },
      needs_revision: { variant: 'secondary' as const, label: 'Needs Revision', color: 'bg-orange-500' }
    };

    const config = statusConfig[status];
    return (
      <Badge variant={config.variant} className={`${config.color} text-white`}>
        {config.label}
      </Badge>
    );
  };

  const filteredSubmissions = submissions.filter(sub => {
    if (activeTab === 'pending') return sub.status === 'pending';
    if (activeTab === 'under_review') return sub.status === 'under_review';
    if (activeTab === 'needs_revision') return sub.status === 'needs_revision';
    return true;
  });

  // Mock data structure to satisfy the type error at line 531
  const mockParishData: Record<Diocese, ParishSubmission[]> = {
    tagbilaran: filteredSubmissions.filter(s => s.diocese === 'tagbilaran'),
    talibon: filteredSubmissions.filter(s => s.diocese === 'talibon')
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="flex flex-col items-center space-y-4">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
          <p className="text-sm text-muted-foreground">Loading parish submissions...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Parish Review</h1>
          <p className="text-muted-foreground">
            Review and approve parish submissions for {userProfile?.diocese === 'tagbilaran' ? 'Diocese of Tagbilaran' : 'Diocese of Talibon'}
          </p>
        </div>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="pending" className="flex items-center gap-2">
            <Clock className="w-4 h-4" />
            Pending ({submissions.filter(s => s.status === 'pending').length})
          </TabsTrigger>
          <TabsTrigger value="under_review" className="flex items-center gap-2">
            <Eye className="w-4 h-4" />
            Under Review ({submissions.filter(s => s.status === 'under_review').length})
          </TabsTrigger>
          <TabsTrigger value="needs_revision" className="flex items-center gap-2">
            <Edit className="w-4 h-4" />
            Needs Revision ({submissions.filter(s => s.status === 'needs_revision').length})
          </TabsTrigger>
        </TabsList>

        <TabsContent value={activeTab} className="space-y-4">
          {filteredSubmissions.length === 0 ? (
            <Card>
              <CardContent className="py-8 text-center">
                <FileText className="w-12 h-12 mx-auto text-muted-foreground mb-4" />
                <h3 className="text-lg font-semibold mb-2">No submissions found</h3>
                <p className="text-muted-foreground">
                  No parishes have submitted for review in the {activeTab.replace('_', ' ')} category.
                </p>
              </CardContent>
            </Card>
          ) : (
            filteredSubmissions.map((submission) => (
              <Card key={submission.id} className="hover:shadow-md transition-shadow">
                <CardHeader>
                  <div className="flex justify-between items-start">
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-2">
                        <CardTitle className="text-lg">{submission.name}</CardTitle>
                        {getStatusBadge(submission.status)}
                      </div>
                      <CardDescription className="flex items-center gap-4">
                        <span className="flex items-center gap-1">
                          <MapPin className="w-4 h-4" />
                          {submission.location}
                        </span>
                        {submission.priest && (
                          <span>Parish Priest: {submission.priest}</span>
                        )}
                      </CardDescription>
                    </div>
                    <div className="flex gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => setSelectedSubmission(submission)}
                        title="Review submission"
                      >
                        <Eye className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>
                </CardHeader>
                
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 text-sm">
                    {submission.contactEmail && (
                      <div className="flex items-center gap-2">
                        <Mail className="w-4 h-4 text-muted-foreground" />
                        <span>{submission.contactEmail}</span>
                      </div>
                    )}
                    {submission.phoneNumber && (
                      <div className="flex items-center gap-2">
                        <Phone className="w-4 h-4 text-muted-foreground" />
                        <span>{submission.phoneNumber}</span>
                      </div>
                    )}
                    <div className="flex items-center gap-2">
                      <Calendar className="w-4 h-4 text-muted-foreground" />
                      <span>Submitted: {submission.createdAt.toLocaleDateString()}</span>
                    </div>
                  </div>

                  {submission.notes && (
                    <div className="mt-4 pt-3 border-t border-border">
                      <p className="text-sm text-muted-foreground">{submission.notes}</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            ))
          )}
        </TabsContent>
      </Tabs>

      {/* Review Modal */}
      {selectedSubmission && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex justify-between items-start mb-4">
                <div>
                  <h2 className="text-2xl font-bold">{selectedSubmission.name}</h2>
                  <p className="text-muted-foreground">{selectedSubmission.location}</p>
                </div>
                <Button variant="outline" onClick={() => setSelectedSubmission(null)}>
                  Close
                </Button>
              </div>

              {/* Church Details */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Contact Information</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-2">
                    <div>
                      <Label>Parish Priest</Label>
                      <p>{selectedSubmission.priest || 'Not provided'}</p>
                    </div>
                    <div>
                      <Label>Email</Label>
                      <p>{selectedSubmission.contactEmail || 'Not provided'}</p>
                    </div>
                    <div>
                      <Label>Phone</Label>
                      <p>{selectedSubmission.phoneNumber || 'Not provided'}</p>
                    </div>
                    <div>
                      <Label>Parishioners</Label>
                      <p>{selectedSubmission.parishioners || 'Not specified'}</p>
                    </div>
                  </CardContent>
                </Card>

                {selectedSubmission.churchInfo && (
                  <Card>
                    <CardHeader>
                      <CardTitle>Church Information</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-2">
                      <div>
                        <Label>Founding Year</Label>
                        <p>{selectedSubmission.churchInfo.foundingYear || 'Not provided'}</p>
                      </div>
                      <div>
                        <Label>Architectural Style</Label>
                        <p>{selectedSubmission.churchInfo.architecturalStyle || 'Not provided'}</p>
                      </div>
                      <div>
                        <Label>Heritage Classification</Label>
                        <p>{selectedSubmission.churchInfo.heritageClassification || 'None'}</p>
                      </div>
                    </CardContent>
                  </Card>
                )}
              </div>

              {selectedSubmission.churchInfo?.description && (
                <Card className="mb-6">
                  <CardHeader>
                    <CardTitle>Description</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p>{selectedSubmission.churchInfo.description}</p>
                  </CardContent>
                </Card>
              )}

              {/* Review Section */}
              <Card>
                <CardHeader>
                  <CardTitle>Review & Action</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label htmlFor="review-notes">Review Notes</Label>
                    <Textarea
                      id="review-notes"
                      placeholder="Add your review comments here..."
                      value={reviewNotes}
                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setReviewNotes(e.target.value)}
                      className="mt-1"
                    />
                  </div>

                  <div className="flex gap-2 flex-wrap">
                    <Button
                      onClick={() => handleReviewAction('approve')}
                      disabled={isSubmittingReview}
                      className="bg-green-600 hover:bg-green-700"
                    >
                      <CheckCircle className="w-4 h-4 mr-2" />
                      Approve
                    </Button>
                    
                    <Button
                      onClick={() => handleReviewAction('request_revision')}
                      disabled={isSubmittingReview}
                      variant="outline"
                      className="border-orange-200 text-orange-600 hover:bg-orange-50"
                    >
                      <Edit className="w-4 h-4 mr-2" />
                      Request Revision
                    </Button>

                    {selectedSubmission.churchInfo?.heritageClassification && 
                     selectedSubmission.churchInfo.heritageClassification !== 'None' && (
                      <Button
                        onClick={() => handleReviewAction('forward_to_museum')}
                        disabled={isSubmittingReview}
                        variant="outline"
                        className="border-purple-200 text-purple-600 hover:bg-purple-50"
                      >
                        <Send className="w-4 h-4 mr-2" />
                        Forward to Museum
                      </Button>
                    )}
                    
                    <Button
                      onClick={() => handleReviewAction('reject')}
                      disabled={isSubmittingReview}
                      variant="destructive"
                    >
                      <XCircle className="w-4 h-4 mr-2" />
                      Reject
                    </Button>
                  </div>

                  {isSubmittingReview && (
                    <Alert>
                      <AlertTriangle className="h-4 w-4" />
                      <AlertDescription>
                        Processing review action...
                      </AlertDescription>
                    </Alert>
                  )}
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      )}

      {/* Quick Stats - Using proper type to resolve line 531 error */}
      <Card>
        <CardHeader>
          <CardTitle>Diocese Statistics</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="text-center p-4 border rounded-lg">
              <div className="text-2xl font-bold text-blue-600">
                {userProfile?.diocese ? mockParishData[userProfile.diocese].length : 0}
              </div>
              <div className="text-sm text-muted-foreground">Total Submissions</div>
            </div>
            <div className="text-center p-4 border rounded-lg">
              <div className="text-2xl font-bold text-yellow-600">
                {submissions.filter(s => s.status === 'pending').length}
              </div>
              <div className="text-sm text-muted-foreground">Pending Review</div>
            </div>
            <div className="text-center p-4 border rounded-lg">
              <div className="text-2xl font-bold text-green-600">
                {submissions.filter(s => s.status === 'approved').length}
              </div>
              <div className="text-sm text-muted-foreground">Approved</div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};